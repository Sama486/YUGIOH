@page "/Spielen"

@using System.IO;
@using BlazorServer.Data
@using BlazorServer.Pages
@inject NavigationManager NavManager

<style>
  body {
    background-color: lightgray;
  }
</style>
<div style="width:50%; float: left;">
  <h1 style="color:black">Blazor Memory Game</h1>
</div>

<div style="width: 50%;float:right; text-align:right">
  <h1 style="color: black">@GefundenePaare Paare</h1>
</div>


<p style="color: black">Viel Spaß beim spielen!</p>



<div class="memory-grid">

  @for (int index = 0; index < cardArray.Length; index++)
  {
    int localIndex = index;
    int card = cardArray[index];

    if (matchedCards.Contains(index))
    {
      <div class="found"></div>
      if (GefundenePaare == 16)
      {
        PopupVisible = true;
      }
    }
    else
    {
      string scard = "YugiohKarten/" + card.ToString() + ".jfif";     //Pfad für die Karten.

      <div @onclick="() => CardClicked(localIndex)">
        <span hidden="@(clickedCards.Contains(localIndex))"><img src="images/yugiohRückseite.jpg" style="height:100%;width:100%" /></span>
        <span hidden="@(!clickedCards.Contains(localIndex))"><img src="@scard" style="height:100%;width:100%" /></span>
      </div>
    }
  }
</div>
<DxPopup @bind-Visible="@PopupVisible"
         HeaderText="Wow"
         ShowFooter="true">
  <BodyContentTemplate>
    <i>
      Glückwunsch sie haben es geschafft!
    </i>
  </BodyContentTemplate>
  <FooterContentTemplate>
    <DxButton RenderStyle="ButtonRenderStyle.Success" Text="Gut gemacht!"
              Click="@context.CloseCallback"  />
  </FooterContentTemplate>
</DxPopup>
@if(GefundenePaare == 16)
      {
        <button class="buttn" @onclick="NochmalSpielen">Nochmal Spielen</button>
      }

@code {
  int GefundenePaare = 0;
  int numberOfCards = 32;
  int[] cardArray = new int[32];
  List<int> cards = new List<int>();
  List<int> clickedCards = new List<int>();
  List<int> matchedCards = new List<int>();

  bool PopupVisible { get; set; } = false;

  protected override void OnInitialized()
  {
    for (int i = 1; i <= numberOfCards / 2; i++)
    {
      cards.Add(i);
      cards.Add(i);
    }

    for (int i = 0; i < numberOfCards; i++)
    {
      Random random = new Random();
      int randomNumber = random.Next(0, cards.Count - 1);
      cardArray[i] = cards[randomNumber];
      cards.RemoveAt(randomNumber);
    }
  }

  void NochmalSpielen()
  {
   NavManager.NavigateTo("/Spielen", true);
  }

void CardClicked(int index)
{
  if (clickedCards.Count == 2)
  {
    clickedCards.Clear();
  }
  if (clickedCards.Count == 2)
    return;
  clickedCards.Add(index);

  Task.Delay(100).ContinueWith((t) =>          // programm muss sleepen, um buggs zu vermeiden
  {
    if (clickedCards.Count == 2)
    { 
      int num1 = cardArray[clickedCards[0]];
      int num2 = cardArray[clickedCards[1]];
      
      if (num1 == num2 && clickedCards[0] != clickedCards[1])   // diese bedingung dient dazu, dass zwei gleiche karten, die nicht den selben index aufweisen als päärchen gelten.
      {
        matchedCards.Add(clickedCards[0]);
        matchedCards.Add(clickedCards[1]);

        clickedCards.Clear();
        GefundenePaare++;
      }
      clickedCards.Clear();   //Cards werden gecleared, damit sie nichtmehr als angeklickt gelten.
    }
  });
}
}
