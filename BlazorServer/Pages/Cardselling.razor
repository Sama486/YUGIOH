@page "/Cardselling"

@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime
@inject IHttpContextAccessor httpContextAccessor

@using Microsoft.AspNetCore.Http
@using BlazorServer.Data

<h1 class="grün">Verkaufen</h1>

<table class="table">
  <thead class="thead-light">
    <tr>
      <th>
        <p>Name</p>
      </th>
      <th>
        <p>Preis €</p>
      </th>
      <th>
        <p>Editionsnummer</p>
      </th>
      <th>
        <p>Rarität</p>
      </th>
      <th>
        <p>Zustand</p>
      </th>
      <th>
      </th>
      <th>
      </th>

    </tr>

    @foreach (var Cardselling in Cardsellings)
    {
      <tr>
        <td><input @bind="Cardselling.CardName" /></td>
        <td><input @bind="Cardselling.Price" /></td>
        <td><input @bind="Cardselling.EditionNumber" /></td>
        <td><input @bind="Cardselling.Rarity" /></td>
        <td><input @bind="Cardselling.Condition" /></td>
        <td><button type="button" class="btnsave" @onclick="@(e => edit(Cardselling.Id, Cardselling.CardName, Cardselling.Price, Cardselling.EditionNumber, Cardselling.Rarity,Cardselling.Condition))">Save</button></td>
        <td><button type="button" class="btndelete" @onclick="@(e => del(Cardselling.Id))"> Delete </button></td>
      </tr>

    }

  </thead>
  <tbody>
    <tr>
      <td>
        <p>Eingabe</p>
      </td>
    </tr>
    <tr>
      <td>
        <input placeholder="Card Name" @bind="sNewCard" />
      </td>
      <td>
        <input min="0.00" step="0,01" placeholder="Card price" @bind="fNewPrice" />
      </td>
      <td>
        <input placeholder="Card editionnumber" @bind="sNewEditionNumber" />
      </td>
      <td>
        <select required class="select-box" @bind="sNewrarity">
          <option value="" disabled selected>Wähle Rarität</option>
          <option>Common</option>
          <option>Rare</option>
          <option>Super Rare</option>
          <option>Ultra Rare</option>
          <option>Secret Rare</option>
          <option>Ultimate Rare</option>
          <option>Ghost Rare</option>
          <option>Colored Rare</option>
          <option>Starfoil</option>
          <option>Mosaic Rare</option>
          <option>Shatterfoil</option>
          <option>Gold Rare</option>
          <option>Ghost Gold Rare</option>
          <option>Gold Secret Rare</option>
          <option>Platinum Rare</option>
          <option>Platinum Secret Rare</option>
          <option>Parallel Rare</option>
        </select>
      </td>
      <td>
        <select required class="select-box" @bind="sNewCondition">
          <option value="" disabled selected>Wähle Zustand</option>
          <option>Mint</option>
          <option>Near Mint</option>
          <option>Excellent</option>
          <option>Good</option>
          <option>Light Played</option>
          <option>Played</option>
          <option>Poor</option>
          <option>Beschädigt</option>
        </select>
      </td>
      <td colspan="2">
        <button class="butt" @onclick="AddCard">Add Card</button>
      </td>
    </tr>
  </tbody>
</table>



@code {
  private List<CardsellingItem> Cardsellings = new();
  private string sNewCard;
  private float? fNewPrice;
  private string sNewEditionNumber;
  private string sNewrarity;
  private string sNewCondition;
  public string UserName;     //UserName wird Deklariert

  MongoCRUD db = new MongoCRUD("Yugioh1");      //Database wird erstellt

  protected override void OnInitialized()     //Database Daten werden Hochgeladen und kommen in die Tabelle
  {
    UserName = httpContextAccessor.HttpContext.User.Identity.Name;      //UserName wird Initialisiert
    var recs = db.LoadRecords<CardsellingItem>(UserName);

    foreach (var rec in recs)
    {
      Cardsellings.Add(new CardsellingItem      //Database Daten kommen in die Liste
      {
        Id = rec.Id,
        Seller = rec.Seller,
        Available = rec.Available,
        CardName = rec.CardName,
        Price = rec.Price,
        EditionNumber = rec.EditionNumber,
        Rarity = rec.Rarity,
        Condition = rec.Condition,
      });
    }
  }

  private void AddCard()      //Karte kommt in die Datenbank und in die Liste per onclick
  {
    if (!string.IsNullOrWhiteSpace(sNewCard) && fNewPrice > 0 && fNewPrice != null && !string.IsNullOrWhiteSpace(sNewEditionNumber) && !string.IsNullOrWhiteSpace(sNewrarity) && !string.IsNullOrWhiteSpace(sNewCondition)) //In jedem Input muss was stehen
    {
      float tempNewPrice = fNewPrice.Value;
      string sNewPrice = tempNewPrice.ToString("0.00");

      db.InsertRecord2(UserName, "CardsToSell", new CardsellingItem { Seller = UserName, CardName = sNewCard, Available = true, Price = sNewPrice, EditionNumber = sNewEditionNumber, Rarity = sNewrarity, Condition = sNewCondition, });      //Eintrag in die DatenbankEN

      Cardsellings.Add(new CardsellingItem
      {
        CardName = sNewCard,
        Price = tempNewPrice.ToString("0.00"),
        EditionNumber = sNewEditionNumber,
        Rarity = sNewrarity,
        Condition = sNewCondition
      });
      sNewCard = string.Empty;
      fNewPrice = null;
      sNewEditionNumber = string.Empty;
      sNewrarity = string.Empty;
      sNewCondition = string.Empty;
    }

   NavManager.NavigateTo("Cardselling", true);
  }

  private void del(Guid nr)   //Karte wird aus der Datenbank entfernt per onklick
  {
    var myRec = db.LoadRecordById<CardsellingItem>(UserName, new Guid(nr.ToByteArray()));

    db.DeleteRecordById<CardsellingItem>(UserName, myRec.Id);                                            //UserName Eintrag wird deleted
    db.DeleteRecordById<CardsellingItem>("CardsToSell", myRec.Id);                                   //CardsToSell Eintrag wird deleted

   NavManager.NavigateTo("Cardselling", true);
  }

  private void edit(Guid nr, string CardName, string Price, string EditionNumber, string rarity, string condition)   // Datenbankeintrag wird bearbeitet
  {
    var myRec = db.LoadRecordById<CardsellingItem>(UserName, new Guid(nr.ToByteArray()));

    db.UpdateRecordById<CardsellingItem>(UserName, nr, CardName, Price, EditionNumber, rarity, condition);
  }
}


