@page "/Cardbuying"
@inject NavigationManager NavManager
@inject IHttpContextAccessor httpContextAccessor
@using Microsoft.AspNetCore.Http
@using BlazorServer.Data
@using BlazorServer.Pages

<h1>Gebe den Namen der Karte ein, die du kaufen möchtest</h1>
<AuthorizeView>
  <Authorized>
    <div class="form-group">
      <input class="form-control" type="text" placeholder="Karte Suchen..."
             @bind="Suchen"
             @bind:event="oninput" />
    </div>
    <table class="table">
      <thead class="thead-light">
        <tr>
          <th scope="col">Name</th>
          <th scope="col">Preis. (€)</th>
          <th scope="col">Editionsnummer</th>
          <th scope="col">Rarität</th>
          <th scope="col">Zustand</th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        @foreach (var Cardselling in Cardsellings)
        {
          if (!IsVisible(Cardselling))
            continue;
          <tr>
            <td>@Cardselling.CardName</td>
            <td>@Cardselling.Price</td>
            <td>@Cardselling.EditionNumber</td>
            <td>@Cardselling.Rarity</td>
            <td>@Cardselling.Condition</td>
            <td><button @onclick="@(e => buy(Cardselling.Seller))" class="BtnBuy">Kaufen</button></td>
          </tr>
        }
      </tbody>
    </table>
  </Authorized>
  <NotAuthorized>
    <div class="form-group">
      <input class="form-control" type="text" placeholder="Karte Suchen..."
             @bind="Suchen"
             @bind:event="oninput" />
    </div>
    <table class="table">
      <thead class="thead-light">
        <tr>
          <th scope="col">Name</th>
          <th scope="col">Preis. (€)</th>
          <th scope="col">Editionsnummer</th>
          <th scope="col">Rarität</th>
          <th scope="col">Zustand</th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        @foreach (var Cardselling in Cardsellings)
        {
          if (!IsVisible(Cardselling))
            continue;
          <tr>
            <td>@Cardselling.CardName</td>
            <td>@Cardselling.Price</td>
            <td>@Cardselling.EditionNumber</td>
            <td>@Cardselling.Rarity</td>
            <td>@Cardselling.Condition</td>
          </tr>
        }
      </tbody>
    </table>
  </NotAuthorized>
</AuthorizeView>


@code
{
  public string UserName;
  public string UserComb;
  public string col;

  private List<CardsellingItem> Cardsellings = new();

  MongoCRUD db = new MongoCRUD("Yugioh1");

  protected override void OnInitialized()
  {
    UserName = httpContextAccessor.HttpContext.User.Identity.Name;      //UserName wird Initialisiert

    var recs = db.LoadRecords<CardsellingItem>("CardsToSell");
    foreach (var rec in recs)
    {
      Cardsellings.Add(new CardsellingItem
      {
        Id = rec.Id,
        Seller = rec.Seller,
        Available = rec.Available,
        CardName = rec.CardName,
        Price = rec.Price,
        EditionNumber = rec.EditionNumber,
        Rarity = rec.Rarity,
        Condition = rec.Condition,
      });
    }
  }

  public string Suchen { get; set; }

  public bool IsVisible(CardsellingItem Cardselling)
  {

    if (string.IsNullOrEmpty(Suchen))
      return true;

    if (Cardselling.CardName.Contains(Suchen, StringComparison.OrdinalIgnoreCase))
      return true;

    return false;
  }

  private void buy(string _Verkäufer)
  {
    if (_Verkäufer == UserName)
    {
    }
    else
    {
      //string[] Acteures = { _Verkäufer, UserName };
      //UserComb = Acteures[0].ToString() + " sells to " + Acteures[1].ToString();
      //NavManager.NavigateTo($"Chat2/{_Verkäufer}/{UserComb}");

      col = _Verkäufer + " " + UserName;
      NavManager.NavigateTo($"Chat2/{col}");
    }
  }
}