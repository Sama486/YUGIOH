@page "/Chat2/{col}"
@using BlazorServer.Data
@using MongoDB.Driver
@using MongoDB.Bson
@using MongoDB.Bson.Serialization.Attributes
@using BlazorServer
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.SignalR.Client



@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager NM


<h1>Chatte mit @col.Split(' ')[0].Trim()</h1>
<div class="Nachrichtenbox">
  <div class="NachrichtenScrollBox">
    <div>
      @foreach (var message in Chats)       //Der angeklickte Chat wird geladen
      {
        if (message.SourceUserName == UserName)
        {
          <div style="width:100%">
            <div class="Nachrichten" style="float:right; clear:right ; margin-left:55%">
              <p>
                @message.Content
              </p>
              <footer>@SendTime(message.SendTime);</footer>
            </div>
          </div>
        }
        if (message.TargetUserName == UserName)
        {
          <div style="width:100% ">
            <div class="Nachrichten" style="float:left;clear:left ; margin-right:55%">
              <p>
                @message.Content

              </p>
              <footer>@SendTime(message.SendTime);</footer>
            </div>
          </div>
        }
      }
    </div>
  </div>
  <div class="Chats">
    @foreach (var col in CollectionNames)                              //Die collections bzw chats in den der User was verloren hat, werden geladen.
    {
      if (col.ColName.EndsWith(UserName))                                        //Ich bin Käufer
      {
        var recs2 = dbChat.LoadRecords<Chatten>(col.ColName);

        Trimmed = col.ColName.Split(' ')[0].Trim();

    <div class="SingleChat" @onclick="@(e => SingleChatClick(col.ColName))" @oncontextmenu="((e) => ContextMenu.ShowAsync(e))" @oncontextmenu:preventDefault>
      <p>@Trimmed</p>

      @foreach (var rec2 in recs2)
      {
        if (rec2 == recs2[recs2.Count - 1] && !rec2.Gesehen && rec2.TargetUserName == UserName)
        {
            <div style="background-color: blue; border-radius: 50%; height: 20px; width: 20px; float: right; margin-bottom:5px; margin-right:5px; "></div>
        }
        if (i == recs2.Count)
        {
          if (rec2.Content.Length > 15)
          {
            <p><b>@rec2.Content.Substring(0, 15)...</b></p>
          }
          else
          {
            <p><b>@rec2.Content</b></p>
          }
          i = 1;
        }
        else
        {
          i++;
        }

      }
      @*@for(i = 0; i <= recs2.Count -1 ; i++)
     {
      if (i == recs2.Count && !recs2[i].Gesehen && recs2[i].TargetUserName == UserName)
      {
        <div style="background-color: blue; border-radius: 50%; height: 20px; width: 20px; float: right; margin-top:5px; margin-right:5px;"></div>
      }
    }*@

    </div>
        <DxContextMenu @ref="@ContextMenu" ItemClick="@(e => DeleteChat(col.ColName))">
          <Items>
            <DxContextMenuItem Text="Delete"></DxContextMenuItem>
          </Items>
        </DxContextMenu>
      }
    }
  </div>
  <input class="Chatinput" rows="5" @bind="sNewMessage" @onkeyup="@SendWithEnter" />
  <button class="buttn" @onclick="Send2">Send</button>
</div>

@code {
  DxContextMenu ContextMenu { get; set; }

  bool b = false;
  public int i = 1;
  public string UserName;
  public string Trimmed;
  public string col2;
  private string sNewMessage = "";

  [Parameter]
  public string col { get; set; }
  private DateTime SendingTime = DateTime.UtcNow;
  private HubConnection hubConnection;

  private List<CardinfoItem> Cardinfos = new();
  private List<Chatten> Chats = new();
  private List<SingleChat> CollectionNames = new();


  MongoCRUD db = new MongoCRUD("Yugioh1");
  MongoCRUD dbChat = new MongoCRUD("Chats");

  protected override void OnInitialized()
  {
    UserName = httpContextAccessor.HttpContext.User.Identity.Name;      //UserName wird Initialisiert

    col2 = col.Split(' ')[1].Trim() + " " + col.Split(' ')[0].Trim();

    var recs2 = dbChat.LoadRecords<Chatten>(col);
    foreach (var rec2 in recs2)
    {
      Chats.Add(new Chatten
      {
        SourceUserName = rec2.SourceUserName,
        TargetUserName = rec2.TargetUserName,
        Content = rec2.Content,
        SendTime = rec2.SendTime,
        Gesehen = rec2.Gesehen
      });
    }

    var client = new MongoClient("mongodb://localhost/");   //Host und Port
    var server = client.GetServer();
    var database = server.GetDatabase("Chats");
    foreach (var col in database.GetCollectionNames())     //Collections werden durchsucht
    {
      if (col.EndsWith(UserName))                          //Wenn Collection den Username beinhaltet, kommt der Chat in die Liste CollectionNames
      {
        var recs2_ = dbChat.LoadRecords<Chatten>(col);
        CollectionNames.Add(new SingleChat       //CollectionName und Sendtime wird in die Liste geschrieben, damit die nach der Zeit geordnet werden kann.
        {
          ColName = col,
          SendTime = recs2_[recs2_.Count -1 ].SendTime
        });
      }
    }
    CollectionNames.Sort((x, y) => DateTime.Compare(y.SendTime, x.SendTime));   //Liste wird umgekehrt sortiert, damit Der Letzte SingleChat oben steht.
  }

  protected override async Task OnInitializedAsync()
  {
    UserName = httpContextAccessor.HttpContext.User.Identity.Name;      //UserName wird Initialisiert

    hubConnection = new HubConnectionBuilder()
    .WithUrl(NM.ToAbsoluteUri("/chathub"))
    .Build();

    var recs2 = dbChat.LoadRecords<Chatten>(col);
    foreach (var rec2 in recs2)
    {
      Chats.Add(new Chatten
      {
        SourceUserName = rec2.SourceUserName,
        TargetUserName = rec2.TargetUserName,
        Content = rec2.Content,
        SendTime = rec2.SendTime,
        Gesehen = rec2.Gesehen
      });
      Gesehen(col, col2, rec2.Id);
    }

    hubConnection.On<string, string, string, DateTime>("ReceiveMessage", (user, user2, message, time) =>
    {
      Chats.Add(new Chatten
      {
        SourceUserName = user,
        TargetUserName = user2,
        Content = message,
        SendTime = time,
        //Gesehen = rec2.Gesehen
      });

      StateHasChanged();
    });

    await hubConnection.StartAsync();
  }

  async Task Send2()
  {
    if (!string.IsNullOrWhiteSpace(sNewMessage))
    {
      await hubConnection.SendAsync("SendMessage", UserName, col.Split(' ')[0].Trim(), sNewMessage, SendingTime);       //Gesendetes Material

      DateTime timeUtc = DateTime.UtcNow;              //Zeit wird immer 2 Stunden früher in die Datenbank geschrieben

      //dbChat.InsertRecord2(col, col2, new Chatten { SourceUserName = UserName, TargetUserName = col.Split(' ')[0].Trim(), Content = sNewMessage, SendTime = timeUtc, Gesehen = false });    //Eintrag in die Datenbank
      dbChat.InsertRecord(col, new Chatten { SourceUserName = UserName, TargetUserName = col.Split(' ')[0].Trim(), Content = sNewMessage, SendTime = timeUtc, Gesehen = false });
      dbChat.InsertRecord(col2, new Chatten { SourceUserName = UserName, TargetUserName = col.Split(' ')[0].Trim(), Content = sNewMessage, SendTime = timeUtc, Gesehen = false });
      sNewMessage = string.Empty;
    }
  }
  public bool IsConnected =>
      hubConnection.State == HubConnectionState.Connected;    //Connection für die Liveübertragung

  public async ValueTask DisposeAsync()
  {
    if (hubConnection is not null)
    {
      await hubConnection.DisposeAsync();
    }
  }

  protected async void SendWithEnter(KeyboardEventArgs e)       //Mit Enter die Nachricht versenden
  {
    if (e.Code == "Enter" || e.Code == "NumpadEnter")
    {
      await Send2();
    }
  }

  private void SingleChatClick(string col)         //Click Event um zum Chat zu Gelangen
  {
    NM.NavigateTo($"Chat2/{col}");
    Chats.Clear();

    var recs2 = dbChat.LoadRecords<Chatten>(col);
    foreach (var rec2 in recs2)
    {
      Chats.Add(new Chatten
      {
        SourceUserName = rec2.SourceUserName,
        TargetUserName = rec2.TargetUserName,
        Content = rec2.Content,
        SendTime = rec2.SendTime,
        Gesehen = rec2.Gesehen
      });
      Gesehen(col, col2, rec2.Id);
    }

  }

  public void Gesehen(string col, string col2, Guid id)   //Datenbank Gesehen == True
  {
    dbChat.UpdateRecordChat<Chatten>(col, col2, id);
  }

  private void DeleteChat(string col)           //Chatverlauf löschen
  {
    dbChat.DeleteCollection<Chatten>(col);
  }

  private string SendTime(DateTime SendTime)    //Funktion für die Sendezeit
  {
    string sSendTime;

    var Europe = TimeZoneInfo.FindSystemTimeZoneById("Central European Standard Time");
    if (SendTime != DateTime.Now)
    {

      var today = TimeZoneInfo.ConvertTimeFromUtc(SendTime, Europe);


      if (today.Date == DateTime.Today.Date)    //Wenn die Nachricht Heute verschickt wurde
      {
        sSendTime = today.ToString().Split(' ')[1].Trim();
      }
      else
      {
        sSendTime = today.ToString().Split(' ')[0].Trim();
      }

      return sSendTime;
    }
    sSendTime = SendTime.ToString();
    return sSendTime;
  }
}
