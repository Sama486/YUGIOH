@page "/ChatProto"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorServer.Data
@using MongoDB.Driver
@using MongoDB.Bson
@using MongoDB.Bson.Serialization.Attributes
@using BlazorServer
@using Microsoft.AspNetCore.Http

@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager NavManager
@implements IAsyncDisposable

<div class="form-group">
  <label>
    User:@UserName
  </label>
</div>
<div class="form-group">
  <label>
    Message:
    <input @bind="sNewMessage" size="50" />
  </label>
</div>
<button @onclick="Send2" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
  @foreach (var message in messages)
  {
   
      <li>@message</li>
    
  }
</ul>

@code {

  private string UserName;
  private string sNewMessage;
  private string col2;

  private DateTime SendingTime = DateTime.Now;
  private HubConnection hubConnection;

  private List<string> messages = new();
  private List<string> CollectionNames = new();


  protected override async Task OnInitializedAsync()
  {
    UserName = httpContextAccessor.HttpContext.User.Identity.Name;      //UserName wird Initialisiert

    hubConnection = new HubConnectionBuilder()
      .WithUrl(NavManager.ToAbsoluteUri("/chathub"))
      .Build();

    hubConnection.On<string, string, string, DateTime>("ReceiveMessage", (user, user2, message, time) =>
    {
      var encodedMsg = $"{user}: {message}: {time}";
      messages.Add(encodedMsg);
      StateHasChanged();
    });

    await hubConnection.StartAsync();
  }

  async Task Send2()
  {
    if (!string.IsNullOrWhiteSpace(sNewMessage))
    {
      await hubConnection.SendAsync("SendMessage", UserName, "", sNewMessage, SendingTime);

      sNewMessage = string.Empty;
    }
  }

  public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;

  public async ValueTask DisposeAsync()
  {
    if (hubConnection is not null)
    {
      await hubConnection.DisposeAsync();
    }
  }





}